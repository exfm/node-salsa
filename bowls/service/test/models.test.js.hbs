"use strict";

var assert = require("assert"),
    when = require("when"),
    sequence = require("sequence"),
    crypto = require("crypto"),
    _ = require("underscore"),
    magneto = require('magneto'),
    helpers = require("./helpers");

var {{formalName}} = helpers.covRequire("../lib/model");


describe("Model", function(){
    magneto.server = null;

    before(function(done){
        helpers.setup(done);
    });

    afterEach(function(done){
        helpers.teardown(done);
    });
    describe("get", function(){
        it("should get a {{name}}", function(done){
            sequence(this).then(function(next){
                helpers.create{{formalName}}().then(next, assert.fail);
            }).then(function(next, s){
                helpers.{{name}}Ids.push(s.id);
                {{formalName}}.get("{{name}}", s.id).then(function(data){
                    assert.equal(s.title, data.title);
                    done();
                }, assert.fail);
            });
        });

        it("should get a {{name}} by id", function(done){
            var title = "this is a title";
            sequence(this).then(function(next){
                helpers.create{{formalName}}({'title': title}).then(next);
            }).then(function(next, s){
                {{formalName}}.getById(s.id).then(function(s){
                    assert.equal(title, s.title);
                    done();
                });
            });

    describe("create", function(){
        it("should create create a {{name}}", function(done){
            var title = "this is a title";
            sequence(this).then(function(next){
                helpers.create{{formalName}}({'title': title}).then(next);
            }).then(function(next, s){
                {{formalName}}.getById(s.id).then(function({{name}}){
                    next({{name}});
                });
            }).then(function(next, {{name}}){
                assert.equal({{name}}.title, title);
                done();
            });
        });
    });

    describe("update", function(){
        it("should update stuff", function(done){
            var title = "this is a title",
                id;
            sequence(this).then(function(next){
                helpers.create{{formalName}}({
                    'title': title
                }).then(next);
            }).then(function(next, s){
                id = s.id;
                {{formalName}}.update('{{name}}', s.id).set({
                    'title': 'this is a new title'
                })
                .commit()
                .then(next);
            }).then(function(next){
                {{formalName}}.getById(id).then(next);
            }).then(function(next, {{name}}){
                assert.equal('this is a new title', {{name}}.title);
                done();
            });
        });
    });
});